// <auto-generated />
using System;
using BlogApi.BlogDatabase.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BlogApi.BlogDatabase.Migrations
{
    [DbContext(typeof(BlogContext))]
    [Migration("20211201194726_AddProfilePhoto")]
    partial class AddProfilePhoto
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BlogApi.BlogDatabase.Models.Article", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InnerData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PhotoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PreviewPhotoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PhotoId");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("BlogApi.BlogDatabase.Models.Photo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("BlogApi.BlogDatabase.Models.UserPhoto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PhotoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProfilePhotoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PhotoId");

                    b.HasIndex("ProfilePhotoId");

                    b.ToTable("UserPhotos");
                });

            modelBuilder.Entity("BlogApi.BlogDatabase.Models.Article", b =>
                {
                    b.HasOne("BlogApi.BlogDatabase.Models.Photo", "Photo")
                        .WithMany()
                        .HasForeignKey("PhotoId");

                    b.Navigation("Photo");
                });

            modelBuilder.Entity("BlogApi.BlogDatabase.Models.UserPhoto", b =>
                {
                    b.HasOne("BlogApi.BlogDatabase.Models.Photo", "Photo")
                        .WithMany("UserPhotos")
                        .HasForeignKey("PhotoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlogApi.BlogDatabase.Models.Photo", "ProfilePhoto")
                        .WithMany("UserProfilePhotos")
                        .HasForeignKey("ProfilePhotoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Photo");

                    b.Navigation("ProfilePhoto");
                });

            modelBuilder.Entity("BlogApi.BlogDatabase.Models.Photo", b =>
                {
                    b.Navigation("UserPhotos");

                    b.Navigation("UserProfilePhotos");
                });
#pragma warning restore 612, 618
        }
    }
}
